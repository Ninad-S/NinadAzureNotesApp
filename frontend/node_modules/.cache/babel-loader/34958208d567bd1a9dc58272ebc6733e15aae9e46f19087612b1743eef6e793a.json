{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\Keeper app\\\\your-frontend\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport Login from \"./Login\";\nimport AccessDenied from \"./AccessDenied\";\nimport UpdateArea from \"./UpdateArea\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8000\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [wasValid, setWasValid] = useState(true);\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // Fetch notes from the backend\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/notes`);\n      setNotes(response.data);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n  useEffect(() => {\n    if (isLoggedIn) fetchNotes();\n  }, [isLoggedIn]);\n\n  // Handle user login\n  const handleLogin = async (username, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/api/users/login`, {\n        username,\n        password\n      });\n      setCurrentUser(response.data.user);\n      setIsLoggedIn(true);\n      setWasValid(true);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      setIsLoggedIn(false);\n      setWasValid(false);\n    }\n  };\n\n  // Add a new note or update an existing one\n  const addNote = async noteData => {\n    try {\n      if (noteData.id) {\n        // If an ID is provided in the noteData object update the existing note.\n        await axios.put(`${API_URL}/api/notes/${noteData.id}`, noteData);\n        fetchNotes(); // Refresh the notes list after update.\n      } else {\n        // If no ID is provided create a new note.\n        await axios.post(`${API_URL}/api/notes`, noteData);\n        fetchNotes(); // Refresh the notes list after adding.\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error adding/updating note:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    }\n  };\n\n  // Delete a note by ID\n  const deleteNote = async id => {\n    try {\n      await axios.delete(`${API_URL}/api/notes/${id}`);\n      fetchNotes();\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n\n  // Edit a selected note\n  const editNote = noteItem => {\n    setSelectedNote(noteItem);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !wasValid ? /*#__PURE__*/_jsxDEV(AccessDenied, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }, this) : !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        username: currentUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsLoggedIn(false),\n        children: \"LOGOUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(CreateArea, {\n        onAdd: addNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap'\n        },\n        children: notes.map(noteItem => /*#__PURE__*/_jsxDEV(Note, {\n          id: noteItem.id,\n          title: noteItem.title,\n          content: noteItem.content,\n          author: noteItem.author,\n          onDelete: deleteNote,\n          onEdit: () => editNote(noteItem)\n        }, noteItem.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }, this), selectedNote && /*#__PURE__*/_jsxDEV(UpdateArea, {\n        note: selectedNote,\n        onEdit: (id, updatedNote) => addNote({\n          ...updatedNote,\n          id\n        }),\n        onCancel: () => setSelectedNote(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 6\n  }, this);\n}\n_s(App, \"5g+A5zXlSkZw2P1JW6I6PRQ6s/I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","Note","CreateArea","Login","AccessDenied","UpdateArea","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","notes","setNotes","currentUser","setCurrentUser","isLoggedIn","setIsLoggedIn","wasValid","setWasValid","selectedNote","setSelectedNote","fetchNotes","response","get","data","error","console","handleLogin","username","password","post","user","_error$response","message","addNote","noteData","id","put","_error$response2","deleteNote","delete","editNote","noteItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onClick","onAdd","style","display","flexWrap","map","title","content","author","onDelete","onEdit","note","updatedNote","onCancel","_c","$RefreshReg$"],"sources":["C:/react/Keeper app/your-frontend/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport Login from \"./Login\";\nimport AccessDenied from \"./AccessDenied\";\nimport UpdateArea from \"./UpdateArea\";\nimport axios from \"axios\";\n\nconst API_URL = \"http://localhost:8000\";\n\nfunction App() {\n   const [notes, setNotes] = useState([]);\n   const [currentUser, setCurrentUser] = useState(null);\n   const [isLoggedIn, setIsLoggedIn] = useState(false);\n   const [wasValid, setWasValid] = useState(true);\n   const [selectedNote, setSelectedNote] = useState(null);\n\n   // Fetch notes from the backend\n   const fetchNotes = async () => {\n     try {\n       const response = await axios.get(`${API_URL}/api/notes`);\n       setNotes(response.data);\n     } catch (error) {\n       console.error(\"Error fetching notes:\", error);\n     }\n   };\n\n   useEffect(() => {\n     if (isLoggedIn) fetchNotes();\n   }, [isLoggedIn]);\n\n   // Handle user login\n   const handleLogin = async (username, password) => {\n     try {\n       const response = await axios.post(`${API_URL}/api/users/login`, { username, password });\n       setCurrentUser(response.data.user);\n       setIsLoggedIn(true);\n       setWasValid(true);\n     } catch (error) {\n       console.error(\"Login failed:\", error.response?.data || error.message);\n       setIsLoggedIn(false);\n       setWasValid(false);\n     }\n   };\n\n   // Add a new note or update an existing one\n   const addNote = async (noteData) => {\n     try {\n       if(noteData.id){\n          // If an ID is provided in the noteData object update the existing note.\n          await axios.put(`${API_URL}/api/notes/${noteData.id}`, noteData); \n          fetchNotes(); // Refresh the notes list after update.\n       } else{\n          // If no ID is provided create a new note.\n          await axios.post(`${API_URL}/api/notes`, noteData); \n          fetchNotes(); // Refresh the notes list after adding.\n       }\n     } catch (error) { \n        console.error(\"Error adding/updating note:\", error.response?.data || error.message); \n     }\n   };\n\n   // Delete a note by ID\n   const deleteNote = async (id) => { \n      try { \n        await axios.delete(`${API_URL}/api/notes/${id}`); \n        fetchNotes(); \n      } catch (error) { \n        console.error(\"Error deleting note:\", error); \n      } \n   };\n\n   // Edit a selected note\n   const editNote = (noteItem) => { \n      setSelectedNote(noteItem); \n   };\n\n   return (\n     <div>\n       {!wasValid ? (\n         <AccessDenied />\n       ) : !isLoggedIn ? (\n         <Login onLogin={handleLogin} />\n       ) : (\n         <>\n           <Header username={currentUser.username} />\n           <button onClick={() => setIsLoggedIn(false)}>LOGOUT</button>\n           <CreateArea onAdd={addNote} />\n           <div style={{ display:'flex', flexWrap:'wrap' }}>\n             {notes.map((noteItem) => (\n               <Note\n                 key={noteItem.id}\n                 id={noteItem.id}\n                 title={noteItem.title}\n                 content={noteItem.content}\n                 author={noteItem.author}\n                 onDelete={deleteNote}\n                 onEdit={() => editNote(noteItem)}\n               />\n             ))}\n           </div>\n           {selectedNote && (\n             <UpdateArea\n               note={selectedNote}\n               onEdit={(id, updatedNote) => addNote({ ...updatedNote, id })}\n               onCancel={() => setSelectedNote(null)}\n             />\n           )}\n           <Footer />\n         </>\n       )}\n     </div>\n   );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}